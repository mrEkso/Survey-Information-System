services:
  ### mysql ####################################################
  mysql:
    image: mysql
    container_name: ${DOCKER_PROJECT_NAME}-mysql
    environment:
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    ports:
      - ${DOCKER_MYSQL_PORT}:${DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u root -p1234" ]
      timeout: 20s
      retries: 10
    networks:
      - localnet
  ### spring ###################################################
  spring-boot-app:
    container_name: ${DOCKER_PROJECT_NAME}-spring-boot-app
    restart: on-failure
    build:
      context: ./backend
      dockerfile: .docker/Dockerfile.dev
    volumes:
      - ./backend/src:/app/src
      - ~/.m2:/root/.m2
      - ./uploads:/app/uploads
    ports:
      - ${SPRING_DOCKER_PORT}:${SPRING_PORT}
    environment:
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
      - JAVA_OPTS=-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=${DB_PROD_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - localnet
  ### react ####################################################
  react-app:
    container_name: ${DOCKER_PROJECT_NAME}-react-app
    build:
      context: ./frontend
      dockerfile: .docker/Dockerfile.dev
    volumes:
      - './frontend:/app'
      - '/app/node_modules'
    ports:
      - ${REACT_DOCKER_PORT}:${REACT_DOCKER_PORT}
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    networks:
      - localnet
networks:
  localnet:
    driver: bridge
